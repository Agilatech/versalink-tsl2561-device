0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.15.9
3 info using node@v6.2.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/scott/Agilatech/dist/versalink/versalink-tsl2561-device',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/scott/.npm/versalink-tsl2561-device/0.9.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/scott/.npm correctMkdir not in flight; initializing
10 verbose tar pack [ '/Users/scott/.npm/versalink-tsl2561-device/0.9.0/package.tgz',
10 verbose tar pack   '/Users/scott/Agilatech/dist/versalink/versalink-tsl2561-device' ]
11 verbose tarball /Users/scott/.npm/versalink-tsl2561-device/0.9.0/package.tgz
12 verbose folder /Users/scott/Agilatech/dist/versalink/versalink-tsl2561-device
13 info prepublish versalink-tsl2561-device@0.9.0
14 verbose addLocalTarball adding from inside cache /Users/scott/.npm/versalink-tsl2561-device/0.9.0/package.tgz
15 verbose correctMkdir /Users/scott/.npm correctMkdir not in flight; initializing
16 silly cache afterAdd versalink-tsl2561-device@0.9.0
17 verbose afterAdd /Users/scott/.npm/versalink-tsl2561-device/0.9.0/package/package.json not in flight; writing
18 verbose correctMkdir /Users/scott/.npm correctMkdir not in flight; initializing
19 verbose afterAdd /Users/scott/.npm/versalink-tsl2561-device/0.9.0/package/package.json written
20 silly publish { name: 'versalink-tsl2561-device',
20 silly publish   version: '0.9.0',
20 silly publish   description: 'TSL2561 luminosity device driver for use in the Agilatech VersaLink system',
20 silly publish   main: 'tsl2561-scout.js',
20 silly publish   directories: { example: 'example' },
20 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
20 silly publish   repository:
20 silly publish    { type: 'git',
20 silly publish      url: 'git+https://github.com/Agilatech/versalink-tsl2561-device.git' },
20 silly publish   keywords: [ 'sensor', 'luminosity', 'beaglebone', 'raspberry pi' ],
20 silly publish   author:
20 silly publish    { name: 'Agilatech',
20 silly publish      email: 'scott@agilatech.com',
20 silly publish      url: 'http://agilatech.com' },
20 silly publish   license: 'MIT',
20 silly publish   bugs: { url: 'https://github.com/Agilatech/versalink-tsl2561-device/issues' },
20 silly publish   homepage: 'https://github.com/Agilatech/versalink-tsl2561-device#readme',
20 silly publish   dependencies:
20 silly publish    { 'versalink-device': '*',
20 silly publish      'zetta-scout': '*',
20 silly publish      '@agilatech/tsl2561': '*' },
20 silly publish   readme: '##VersaLink TSL2561 light sensor device driver\n\nThis device driver is specifically designed to be used with the Agilatech VersaLink IOT System.\n\n###Install\n```\n$> npm install versalink-tsl2561-device\n```\nOR\n```\n$> git clone https://github.com/Agilatech/versalink-tsl2561-device versalink-tsl2561-device\n```\n\n###Usage\nThis device driver may be consumed by either the Agilatech VersaLink IOT system, or the\nApigee Zetta system.\n```\nvar zetta = require(\'zetta\');\nvar tsl2561 = require(\'versalink-tsl2561-device\');\n\nzetta()\n.use(tsl2561, [options])  // where [options] define operational paramters -- omit to accept defaults\n.listen(<port number>)   // where <port number> is the port on which the zetta server should listen\n```\n\n####options\n_options_ is an object which contains key/value pairs used for driver configuration.\n\n```\n"streamPeriod":<period>\nPeriod in milliseconds for broadcast of streaming values\n\n"devicePoll":<period>\nPeriod in milliseconds in which device will be polled to check for new data\n\n"deltaPercent":<percent>\nPercent of the data range which must be exceeded (delta) to qualify as "new" data\n\n"bus":<linux bus device>\nLinux filesystem device for hardware bus, i.e. /dev/i2c-1\n\n"addr":<device address>\nDevice address on the bus, i.e. 0x39 (must be defined as decimal 57 in JSON)\n```\n####deltaPercent in detail\n_deltaPercent_ is the percentage of the current numerical data range which a polled data value must exceed to be considred "new". As an example, consider a temperature range of 100, a deltaPercent of 2, and the current temerature of 34.  In such a case, a device poll must produce a value of 36 or greater, or 32 or less than in order to be stored as a current value.  35 or 33 will be ignored.  deltaPercent may be any value greater than 0 or less than 100, and may be fractional. If not defined, the default is 5 percent.\n\n####Defining the value ranges\nValue ranges may also be defined in the options, and are closely related to deltaPercent.  If not defined, the software will keep track of minimum and maximum values and derive the range from them.  However, that takes time for the software to "learn" the ranges, so they can be defined in the options object:\n```\n"lux_range":<numeric range>\n```\nwhere the &lt;numeric range&gt; is a number representing the absolute range of the value.\n\n####options example\nHere is an example of an options varible which stream values every 10 seconds, polls the device every second, requires an 8% delta change to register a new monitored value, and defines valid ranges on all parameters:\n```\nconst options = {\n    "streamPeriod":10000, \n    "devicePoll":1000, \n    "deltaPercent":8,\n    "lux_range":20000,\n    "bus":"/dev/i2c-1",\n    "addr":57\n}\n```\n\n  \n####Default values\nIf not specified in the options object, the program uses the following default values:\n* _streamPeriod_ : 10000 (10,000ms or 10 seconds)\n* _devicePoll_ : 1000 (1,000ms or 1 second)\n* _deltaPercent_ : 5 (polled values must exceed the range by &plusmn; 5%)\n*_bus_: /dev/i2c-1 (I2C bus 1)\n*_addr_: 0x39 (decimal 57)\n    \n####&lt;port number&gt;\nAgilatech has definied the open port number 1107 as its standard default for IIOT (Industrial Internet Of Things) server application. In practice, most any port above 1024 may be used.\n\n\n###Example\nUsing directly in the zetta server, and accepting all defaults:\n```\nconst zetta = require(\'zetta\');\nconst sensor = require(\'versalink-tsl2561-device\');\nzetta().use(sensor).listen(1107);\n```\n\nTo easily specify some options, simply supply them in an object in the use statement like this:\n```\nzetta().use(sensor, { "bus":"/dev/i2c-0", "addr":0x49, devicePoll":8000, "streamPeriod":15000 });\n```\nOverrides the defaults to initialize the bus on **/dev/i2c-0** at address **0x39** with a data monitoring period of **8 seconds** and streaming data every **15 seconds**\n\n###Properties\nAll drivers contain the following 4 core properties:\n1. **state** : the current state of the device, containing either the value *chron-on* or *chron-off* \nto indicate whether the device is monitoring data isochronally (a predefinied uniform time period of device data query).\n2. **id** : the unique id for this device.  This device id is used to subscribe to this device streams.\n3. **name** : the given name for this device.\n4. **type** : the given type category for this device,  (_sensor_, _actuator_, etc)\n\n\n####Monitored Properties\nIn the *on* state, the driver software for this device monitors three values.\n1. **lux** - The luminosity of broadband light in LUX\n\n  \n####Streaming Properties\nIn the *on* state, the driver software continuously streams three values in isochronal \nfashion with a period defined by *streamPeriod*. Note that a *streamPeriod* of 0 disables streaming.\n1. **lux_stream**\n  \n\n###State\nThis device driver has a binary state: __on__ or __off__. When off, no parameter values are streamed or available, and no commands are accepted other than the _turn-on_ transition. When on, the device is operations and accepts all commands.  The initial state is _off_.\n  \n  \n###Transitions\n1. **turn-on** : Sets the device state to *on*. When on, the device is operational and accepts all commands. Values are streamed, and the device is polled periodically to keep monitored values up to date.\n\n2. **turn-off** : Sets the device state to *off*, When off, no parameter values are streamed or available, and no commands are accepted other than the _turn-on_ transition.\n\n###Design\n\nThis device driver is designed for both streaming and periodic monitored data collection from the TSL2561 sensor.\n\nThe luminosity unit of measure is LUX, where LUX is the SI unit of illuminance and luminous emittance, measuring luminous flux per unit area. It is equal to one lumen per square metre. In photometry, this is used as a measure of the intensity, as perceived by the human eye, of light that hits or passes through a surface. It is analogous to the radiometric unit watts per square metre, but with the power at each wavelength weighted according to the luminosity function, a standardized model of human visual brightness perception.\n\n\n### Hardware\n\n* Beaglebone Black\n* Beaglebone Green\n* Should also work on Raspberry Pi as well as other Linux SBC\n\n\n###Copyright\nCopyright Â© 2016 Agilatech. All Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation \nfiles (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, \nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the \nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE \nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
20 silly publish   readmeFilename: 'README.md',
20 silly publish   gitHead: '24aea0c3244b30c42ccb2493affd1e3f5969a39a',
20 silly publish   _id: 'versalink-tsl2561-device@0.9.0',
20 silly publish   _shasum: '1aa5b4c6869c70ac2abbf2c38ac3d56c560c72c2',
20 silly publish   _from: '.' }
21 verbose getPublishConfig undefined
22 silly mapToRegistry name versalink-tsl2561-device
23 silly mapToRegistry scope (from config) @agilatech
24 silly mapToRegistry registry https://registry.npmjs.org/
25 silly mapToRegistry data Result {
25 silly mapToRegistry   raw: 'versalink-tsl2561-device',
25 silly mapToRegistry   scope: null,
25 silly mapToRegistry   name: 'versalink-tsl2561-device',
25 silly mapToRegistry   rawSpec: '',
25 silly mapToRegistry   spec: 'latest',
25 silly mapToRegistry   type: 'tag' }
26 silly mapToRegistry uri https://registry.npmjs.org/versalink-tsl2561-device
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /Users/scott/.npm/versalink-tsl2561-device/0.9.0/package.tgz
29 verbose request uri https://registry.npmjs.org/versalink-tsl2561-device
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 5:20:12 PM
32 verbose request using bearer token for auth
33 verbose request id e92907b500e4f0b4
34 http request PUT https://registry.npmjs.org/versalink-tsl2561-device
35 http 403 https://registry.npmjs.org/versalink-tsl2561-device
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Tue, 24 Jan 2017 00:20:16 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-den6023-DEN',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1485217215.975997,VS0,VE679',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /Users/scott/.npm/registry.npmjs.org/versalink-tsl2561-device on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 0.9.0." : versalink-tsl2561-device
39 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
39 verbose stack     at emitTwo (events.js:106:13)
39 verbose stack     at Request.emit (events.js:191:7)
39 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
39 verbose stack     at emitOne (events.js:101:20)
39 verbose stack     at Request.emit (events.js:188:7)
39 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
40 verbose statusCode 403
41 verbose pkgid versalink-tsl2561-device
42 verbose cwd /Users/scott/Agilatech/dist/versalink/versalink-tsl2561-device
43 error Darwin 16.3.0
44 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
45 error node v6.2.2
46 error npm  v2.15.9
47 error code E403
48 error "You cannot publish over the previously published version 0.9.0." : versalink-tsl2561-device
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
